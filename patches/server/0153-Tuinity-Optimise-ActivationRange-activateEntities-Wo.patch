From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlexProgrammerDE <40795980+AlexProgrammerDE@users.noreply.github.com>
Date: Mon, 8 Aug 2022 10:00:17 +0200
Subject: [PATCH] Tuinity Optimise ActivationRange#activateEntities(World)

By using our Chunk#forEachEntity method, the time trimmed was
approximately 2-5x in my testing.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index eddf52edc4fb2d820bf21b768e57723712e1b2a6..b555827706747fcf93d5a03de17689d933595cea 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -160,6 +160,25 @@ public class Chunk {
     public boolean mustSave;
     // CraftBukkit end
 
+    /* Concrete start */
+    public void forEachEntity(final java.util.function.Consumer<Entity> consumer) {
+        final List<Entity>[] slices = this.entitySlices;
+        for (int i = 0, slicesLen = slices.length; i < slicesLen; ++i) {
+            final org.bukkit.craftbukkit.util.UnsafeList<Entity> slice = (org.bukkit.craftbukkit.util.UnsafeList)slices[i];
+
+            if (slice == null) {
+                continue;
+            }
+
+            final Object[] data = slice.getRawDataArray();
+
+            for (int j = 0, sliceLen = slice.size(); j < sliceLen; ++j) {
+                consumer.accept((Entity)data[j]);
+            }
+        }
+    }
+    /* Concrete end */
+
     public Chunk(World world, ChunkSnapshot chunksnapshot, int i, int j) {
         this(world, i, j);
         boolean flag = true;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java b/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
index 08d105603c604fcb1a90e00e9ff83bee55621828..9fb8923f4894ef688b643e66a34f500e49b99c9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
@@ -17,7 +17,7 @@ import java.util.RandomAccess;
 public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable {
     private static final long serialVersionUID = 8683452581112892191L;
 
-    private transient Object[] data;
+    private transient Object[] data; public final Object[] getRawDataArray() { return this.data; } /* Concrete - expose for raw get */
     private int size;
     private int initialCapacity;
 
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 4c8d94c87704c8c61111d6432f62f660fdac8f82..ee0cc736cde8a6ccb3d508813fa75a49dd323830 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -154,16 +154,13 @@ public class ActivationRange
      */
     private static void activateChunkEntities(Chunk chunk)
     {
-        for ( List<Entity> slice : chunk.entitySlices )
-        {
-            for ( Entity entity : slice )
-            {
+        chunk.forEachEntity((entity) -> { /* Concrete - optimise this call */
                 if ( MinecraftServer.currentTick > entity.activatedTick )
                 {
                     if ( entity.defaultActivationState )
                     {
                         entity.activatedTick = MinecraftServer.currentTick;
-                        continue;
+                        return; /* Concrete - optimise this call */
                     }
                     switch ( entity.activationType )
                     {
@@ -195,8 +192,7 @@ public class ActivationRange
                             }
                     }
                 }
-            }
-        }
+        }); /* Concrete - optimise this call */
     }
 
     /**
