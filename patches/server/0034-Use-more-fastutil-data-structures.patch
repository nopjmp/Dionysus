From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Mon, 20 Dec 2021 19:16:11 -0600
Subject: [PATCH] Use more fastutil data structures

Use them in more places.

diff --git a/pom.xml b/pom.xml
index bcefa70d5d40d1d6e00e15abd4dbd473870bcf9b..3446b7dfeaeb70f40851603201d71bed11b0459b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -68,12 +68,6 @@
             <version>5.1.49</version>
             <scope>runtime</scope>
         </dependency>
-        <dependency>
-            <groupId>net.sf.trove4j</groupId>
-            <artifactId>trove4j</artifactId>
-            <version>3.0.3</version>
-            <scope>compile</scope>
-        </dependency>
 
         <dependency>
             <groupId>net.minecrell</groupId>
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 4ad9a824b671b2c83a594cb2ad9b98b36d423b46..ca89369cec5423786e0446858301e4e6f3fe5626 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongArraySet;
+import it.unimi.dsi.fastutil.longs.LongIterator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
@@ -309,10 +310,10 @@ public class ChunkProviderServer implements IChunkProvider {
                 int targetSize = Math.min(this.unloadQueue.size() - 100,  (int) (this.unloadQueue.size() * UNLOAD_QUEUE_RESIZE_FACTOR)); // Paper - Make more aggressive
                 // Spigot end
 
-                Iterator<Long> iterator = this.unloadQueue.iterator();
+                LongIterator iterator = this.unloadQueue.iterator();
 
                 while (iterator.hasNext()) { // Spigot
-                    long chunkKey = iterator.next();
+                    long chunkKey = iterator.nextLong();
                     iterator.remove(); // Spigot
                     Chunk chunk = this.chunks.get(chunkKey);
 
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index c583ab7d9a481a7df05acf70dc0d7cc341473bb1..13cf0a5e9237c28e8b869df0e0d863bae76e7084 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -1,15 +1,19 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import it.unimi.dsi.fastutil.objects.Object2LongMap;
+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
+
 import java.net.InetAddress;
-import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
 // CraftBukkit end
 
 public class HandshakeListener implements PacketHandshakingInListener {
 
     private static final com.google.gson.Gson gson = new com.google.gson.Gson(); // Spigot
     // CraftBukkit start - add fields
-    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static final Object2LongOpenHashMap<InetAddress> throttleTracker = new Object2LongOpenHashMap<>();
     private static int throttleCounter = 0;
     // CraftBukkit end
 
@@ -35,7 +39,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 InetAddress address = ((java.net.InetSocketAddress) this.b.getSocketAddress()).getAddress();
 
                 synchronized (throttleTracker) {
-                    if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle) {
+                    if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.getLong(address) < connectionThrottle) {
                         throttleTracker.put(address, currentTime);
                         chatmessage = new ChatMessage("Connection throttled! Please wait before reconnecting.");
                         this.b.sendPacket(new PacketLoginOutDisconnect(chatmessage));
@@ -49,13 +53,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                         throttleCounter = 0;
 
                         // Cleanup stale entries
-                        java.util.Iterator iter = throttleTracker.entrySet().iterator();
-                        while (iter.hasNext()) {
-                            java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
-                            if (entry.getValue() > connectionThrottle) {
-                                iter.remove();
-                            }
-                        }
+                        throttleTracker.object2LongEntrySet().removeIf(entry -> entry.getLongValue() > connectionThrottle); // Dionysus
                     }
                 }
             } catch (Throwable t) {
diff --git a/src/main/java/net/minecraft/server/MethodProfiler.java b/src/main/java/net/minecraft/server/MethodProfiler.java
index 480e2ca972bc9dedc6d77c7f2a2621e01c51f21c..e0276b11cdfda75a3bd1ec75cfecbbe0bdd45cd7 100644
--- a/src/main/java/net/minecraft/server/MethodProfiler.java
+++ b/src/main/java/net/minecraft/server/MethodProfiler.java
@@ -1,13 +1,18 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.function.Supplier;
+
+import it.unimi.dsi.fastutil.longs.LongArrayList;
+import it.unimi.dsi.fastutil.objects.Object2LongMap;
+import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -15,11 +20,11 @@ public class MethodProfiler {
 
     public static final boolean ENABLED = Boolean.getBoolean("enableDebugMethodProfiler"); // CraftBukkit - disable unless specified in JVM arguments
     private static final Logger b = LogManager.getLogger();
-    private final List<String> c = Lists.newArrayList();
-    private final List<Long> d = Lists.newArrayList();
+    private final ObjectArrayList<String> c = new ObjectArrayList<>(); // Dionysus
+    private final LongArrayList d = new LongArrayList(); // Dionysus
     public boolean a;
     private String e = "";
-    private final Map<String, Long> f = Maps.newHashMap();
+    private final Object2LongOpenHashMap<String> f = new Object2LongOpenHashMap<>();
 
     public MethodProfiler() {}
 
@@ -54,19 +59,19 @@ public class MethodProfiler {
         if (!ENABLED) return;  // CraftBukkit
         if (this.a) {
             long i = System.nanoTime();
-            long j = ((Long) this.d.remove(this.d.size() - 1)).longValue();
+            long j = this.d.removeLong(this.d.size() - 1);
 
             this.c.remove(this.c.size() - 1);
             long k = i - j;
 
             if (this.f.containsKey(this.e)) {
-                this.f.put(this.e, Long.valueOf(((Long) this.f.get(this.e)).longValue() + k));
+                this.f.put(this.e, this.f.get(this.e) + k);
             } else {
-                this.f.put(this.e, Long.valueOf(k));
+                this.f.put(this.e, k);
             }
 
             if (k > 100000000L) {
-                MethodProfiler.b.warn("Something\'s taking too long! \'{}\' took aprox {} ms", this.e, Double.valueOf((double) k / 1000000.0D));
+                MethodProfiler.b.warn("Something's taking too long! '{}' took aprox {} ms", this.e, (double) k / 1000000.0D);
             }
 
             this.e = this.c.isEmpty() ? "" : (String) this.c.get(this.c.size() - 1);
@@ -77,22 +82,19 @@ public class MethodProfiler {
         if (!ENABLED || !this.a) {  // CraftBukkit
             return Collections.emptyList();
         } else {
-            long i = this.f.containsKey("root") ? ((Long) this.f.get("root")).longValue() : 0L;
-            long j = this.f.containsKey(s) ? ((Long) this.f.get(s)).longValue() : -1L;
-            ArrayList arraylist = Lists.newArrayList();
+            long i = this.f.getOrDefault("root", 0L);
+            long j = this.f.getOrDefault(s, -1L);
+            ArrayList<MethodProfiler.ProfilerInfo> arraylist = Lists.newArrayList();
 
             if (!s.isEmpty()) {
                 s = s + ".";
             }
 
             long k = 0L;
-            Iterator iterator = this.f.keySet().iterator();
-
-            while (iterator.hasNext()) {
-                String s1 = (String) iterator.next();
 
+            for (String s1 : this.f.keySet()) {
                 if (s1.length() > s.length() && s1.startsWith(s) && s1.indexOf(".", s.length() + 1) < 0) {
-                    k += ((Long) this.f.get(s1)).longValue();
+                    k += this.f.getLong(s1);
                 }
             }
 
@@ -106,27 +108,18 @@ public class MethodProfiler {
                 i = k;
             }
 
-            Iterator iterator1 = this.f.keySet().iterator();
-
-            String s2;
-
-            while (iterator1.hasNext()) {
-                s2 = (String) iterator1.next();
+            for (Object2LongMap.Entry<String> entry : this.f.object2LongEntrySet()) {
+                String s2 = entry.getKey();
                 if (s2.length() > s.length() && s2.startsWith(s) && s2.indexOf(".", s.length() + 1) < 0) {
-                    long l = ((Long) this.f.get(s2)).longValue();
+                    long l = this.f.getLong(s2);
                     double d0 = (double) l * 100.0D / (double) k;
                     double d1 = (double) l * 100.0D / (double) i;
                     String s3 = s2.substring(s.length());
 
                     arraylist.add(new MethodProfiler.ProfilerInfo(s3, d0, d1));
                 }
-            }
-
-            iterator1 = this.f.keySet().iterator();
 
-            while (iterator1.hasNext()) {
-                s2 = (String) iterator1.next();
-                this.f.put(s2, Long.valueOf(((Long) this.f.get(s2)).longValue() * 999L / 1000L));
+                entry.setValue(entry.getLongValue() * 999L / 1000L);
             }
 
             if ((float) k > f) {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 0e9c0466ec0108a822d6e2f9e6b90363159e6f67..d15079f9bb3c77a3268d9d19f1445060ff7342e7 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -73,8 +73,20 @@ public abstract class PlayerList {
     private int v;
 
     // CraftBukkit start
-    private CraftServer cserver;
-    private final Map<String,EntityPlayer> playersByName = new org.spigotmc.CaseInsensitiveMap<EntityPlayer>();
+    private final CraftServer cserver;
+    private final Map<String,EntityPlayer> playersByName = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenCustomHashMap<String, EntityPlayer>(
+        new it.unimi.dsi.fastutil.Hash.Strategy<String>() {
+            @Override
+            public int hashCode(String o) {
+                return o.toLowerCase().hashCode();
+            }
+
+            @Override
+            public boolean equals(String a, String b) {
+                return a.equalsIgnoreCase(b);
+            }
+        }
+    );
     @Nullable String collideRuleTeamName; // Paper - Team name used for collideRule
 
     public PlayerList(MinecraftServer minecraftserver) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 2ab4a1cf4123242665e0605cfd998c4d6a6148ee..9d063df7041f75a43663ad13ce39227e42127294 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -308,19 +308,22 @@ class CraftMetaItem implements ItemMeta, Repairable {
             NBTTagList nbttaglist = tag.getList(ATTRIBUTES.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
 
             // Spigot start
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTracker = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            gnu.trove.map.hash.TObjectDoubleHashMap<String> attributeTrackerX = new gnu.trove.map.hash.TObjectDoubleHashMap<String>();
-            Map<String, IAttribute> attributesByName = new HashMap<String, IAttribute>();
+            // Dionysus - use fastutil instead of trove
+            it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> attributeTracker = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String>();
+            it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String> attributeTrackerX = new it.unimi.dsi.fastutil.objects.Object2DoubleOpenHashMap<String>();
+            final Map<String, IAttribute> attributesByName = ImmutableMap.of(
+                "generic.maxHealth", GenericAttributes.maxHealth,
+                "generic.followRange", GenericAttributes.FOLLOW_RANGE,
+                "generic.knockbackResistance", GenericAttributes.c,
+                "generic.movementSpeed", GenericAttributes.MOVEMENT_SPEED,
+                "generic.attackDamage", GenericAttributes.ATTACK_DAMAGE
+            );
             attributeTracker.put( "generic.maxHealth", 20.0 );
-            attributesByName.put( "generic.maxHealth", GenericAttributes.maxHealth );
             attributeTracker.put( "generic.followRange", 32.0 );
-            attributesByName.put( "generic.followRange", GenericAttributes.FOLLOW_RANGE );
             attributeTracker.put( "generic.knockbackResistance", 0.0 );
-            attributesByName.put( "generic.knockbackResistance", GenericAttributes.c );
             attributeTracker.put( "generic.movementSpeed", 0.7 );
-            attributesByName.put( "generic.movementSpeed", GenericAttributes.MOVEMENT_SPEED );
             attributeTracker.put( "generic.attackDamage", 1.0 );
-            attributesByName.put( "generic.attackDamage", GenericAttributes.ATTACK_DAMAGE );
+            // Dionysus end
             NBTTagList oldList = nbttaglist;
             nbttaglist = new NBTTagList();
 
diff --git a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
index aafdd3682eb95177361795f62943ccfe212a2fae..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 100644
--- a/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
+++ b/src/main/java/org/spigotmc/CaseInsensitiveHashingStrategy.java
@@ -1,18 +0,0 @@
-package org.spigotmc;
-
-import gnu.trove.strategy.HashingStrategy;
-
-class CaseInsensitiveHashingStrategy implements HashingStrategy {
-
-    static final CaseInsensitiveHashingStrategy INSTANCE = new CaseInsensitiveHashingStrategy();
-
-    @Override
-    public int computeHashCode(Object object) {
-        return ((String) object).toLowerCase().hashCode();
-    }
-
-    @Override
-    public boolean equals(Object o1, Object o2) {
-        return o1.equals(o2) || (o1 instanceof String && o2 instanceof String && ((String) o1).toLowerCase().equals(((String) o2).toLowerCase()));
-    }
-}
diff --git a/src/main/java/org/spigotmc/CaseInsensitiveMap.java b/src/main/java/org/spigotmc/CaseInsensitiveMap.java
deleted file mode 100644
index 1934fd50ad103970c20ad52ac32c3a6a3353b17e..0000000000000000000000000000000000000000
--- a/src/main/java/org/spigotmc/CaseInsensitiveMap.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package org.spigotmc;
-
-import gnu.trove.map.hash.TCustomHashMap;
-import java.util.Map;
-
-public class CaseInsensitiveMap<V> extends TCustomHashMap<String, V> {
-
-    public CaseInsensitiveMap() {
-        super(CaseInsensitiveHashingStrategy.INSTANCE);
-    }
-
-    public CaseInsensitiveMap(Map<? extends String, ? extends V> map) {
-        super(CaseInsensitiveHashingStrategy.INSTANCE, map);
-    }
-}
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 887c7d02c19bd83b2f99aff9072973573fcf36d5..0ca9151d72fe1805aa4dc2784760753b47cb3b91 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -1,6 +1,7 @@
 package org.spigotmc;
 
 import com.google.common.base.Throwables;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
@@ -13,7 +14,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
-import gnu.trove.map.hash.TObjectIntHashMap;
 import net.minecraft.server.AttributeRanged;
 import net.minecraft.server.GenericAttributes;
 import net.minecraft.server.MinecraftServer;
@@ -234,7 +234,7 @@ public class SpigotConfig
     }
 
     public static boolean disableStatSaving;
-    public static TObjectIntHashMap<String> forcedStats = new TObjectIntHashMap<String>();
+    public static Object2IntOpenHashMap<String> forcedStats = new Object2IntOpenHashMap<String>();
     private static void stats()
     {
         disableStatSaving = getBoolean( "stats.disable-saving", false );
