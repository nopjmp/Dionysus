From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RemainingToast <Remainingtoast@gmail.com>
Date: Sat, 3 Sep 2022 14:07:59 +1000
Subject: [PATCH] Save books as json


diff --git a/src/main/java/dev/pomf/dionysus/DionysusConfig.java b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
index baadaa251b94c4cb40d98d03825f2385e9a496d1..ea59a59836e42a56c76a127b6ba2f7635495f8df 100644
--- a/src/main/java/dev/pomf/dionysus/DionysusConfig.java
+++ b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
@@ -418,4 +418,14 @@ public class DionysusConfig {
                         networks is predictable and intuitive rather than locational and chaotic."""
         );
     }
+
+    public static boolean saveBooksAsJson = false;
+
+    private static void saveBooksAsJson() {
+        saveBooksAsJson = getBoolean("books.save-as-json", saveBooksAsJson, """
+                        Save/load books as json files (fixes book lag)
+                        Book json files stored in ./world/bookdata/*"""
+        );
+    }
+
 }
diff --git a/src/main/java/dev/pomf/dionysus/util/JsonBookUtil.java b/src/main/java/dev/pomf/dionysus/util/JsonBookUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..597fbaba2b1b19887428cf2c439fb7820bec7231
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/util/JsonBookUtil.java
@@ -0,0 +1,146 @@
+package dev.pomf.dionysus.util;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import net.minecraft.server.*;
+import org.bukkit.Material;
+import org.bukkit.block.ShulkerBox;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.meta.BlockStateMeta;
+import org.bukkit.inventory.meta.BookMeta;
+
+import java.io.*;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
+import java.util.List;
+
+public class JsonBookUtil {
+
+    private static final String FILE_PATH = System.getProperty("user.dir") + "/world/bookdata/%s.json";
+    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
+
+    public static void loadInventory(EntityPlayer player, List<ItemStack> contents) {
+        for (ItemStack slot : contents) {
+            if (slot == null) continue;
+            org.bukkit.inventory.ItemStack copy = slot.asBukkitCopy();
+            loadItemStack(copy);
+        }
+
+        player.updateInventory(player.defaultContainer);
+        player.updateInventory(player.activeContainer);
+    }
+
+    public static void unloadInventory(EntityPlayer player, List<ItemStack> contents) {
+        for (ItemStack slot : contents) {
+            if (slot == null) continue;
+            org.bukkit.inventory.ItemStack copy = slot.asBukkitCopy();
+            unloadItemStack(copy);
+            if (copy.getItemMeta() instanceof BlockStateMeta meta) {
+                if (meta instanceof ShulkerBox) {
+                    ShulkerBox shulker = (ShulkerBox) meta.getBlockState();
+                    Inventory shulkerInv = shulker.getInventory();
+                    for (org.bukkit.inventory.ItemStack shulkerSlot : shulkerInv.getContents()) {
+                        if (shulkerSlot == null) continue;
+                        unloadItemStack(shulkerSlot);
+                    }
+                    shulker.getInventory().setContents(shulkerInv.getContents());
+                    meta.setBlockState(shulker);
+                    copy.setItemMeta(meta);
+                }
+            }
+        }
+
+        player.updateInventory(player.defaultContainer);
+        player.updateInventory(player.activeContainer);
+    }
+
+    public static void unloadItemStack(org.bukkit.inventory.ItemStack itemStack) {
+        if (itemStack.getType() == Material.BOOK_AND_QUILL || itemStack.getType() == Material.WRITTEN_BOOK) {
+            ItemStack nmsStack = ItemStack.fromBukkitCopy(itemStack);
+            NBTTagCompound nbt = nmsStack.getTag();
+            if (nbt == null || nbt.hasKey("key") && nbt.getBoolean("unloaded")) return;
+            itemStack.setItemMeta(unloadBook(nmsStack).getItemMeta());
+        }
+    }
+
+    public static void loadItemStack(org.bukkit.inventory.ItemStack itemStack) {
+        if (itemStack.getType() == Material.BOOK_AND_QUILL || itemStack.getType() == Material.WRITTEN_BOOK) {
+            ItemStack nmsStack = ItemStack.fromBukkitCopy(itemStack);
+            NBTTagCompound nbt = nmsStack.getTag();
+            if (nbt == null || !nbt.getBoolean("unloaded")) return;
+            itemStack.setItemMeta(loadBook(nmsStack).getItemMeta());
+        }
+    }
+
+    private static org.bukkit.inventory.ItemStack unloadBook(ItemStack book) {
+        org.bukkit.inventory.ItemStack clone = book.asBukkitCopy();
+        BookMeta meta = (BookMeta) clone.getItemMeta();
+        try {
+            List<String> pages = new ArrayList<>();
+            for(String str: meta.getPages()) {
+                ByteBuffer buffer = StandardCharsets.UTF_8.encode(str);
+                String utf8str = StandardCharsets.UTF_8.decode(buffer).toString();
+                pages.add(utf8str);
+            }
+            Path path = Paths.get(FILE_PATH.formatted(hash(meta.getPages()+"")));
+            if (!Files.exists(path.getParent())) {
+                Files.createDirectory(path.getParent());
+            }
+            Writer writer = Files.newBufferedWriter(path);
+            GSON.toJson(new BookNBT(pages), writer);
+            writer.close();
+
+            NBTTagCompound nbt = book.getTag();
+            if (nbt != null) {
+                nbt.setString("key", hash(meta.getPages()+""));
+                nbt.setBoolean("unloaded", true);
+                book.setTag(nbt);
+                clone = book.asBukkitCopy();
+                meta = (BookMeta) clone.getItemMeta();
+                meta.setPages(new ArrayList<>());
+                clone.setItemMeta(meta);
+            }
+        } catch (IOException | NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        }
+        return clone;
+    }
+
+    private static org.bukkit.inventory.ItemStack loadBook(ItemStack book) {
+        org.bukkit.inventory.ItemStack clone = book.asBukkitCopy();
+        NBTTagCompound nbt = book.getTag();
+        if (nbt != null) {
+            try {
+                Reader reader = Files.newBufferedReader(Paths.get(FILE_PATH.formatted(nbt.getString("key"))));
+                BookNBT bookNBT = GSON.fromJson(reader, BookNBT.class);
+                reader.close();
+                BookMeta bookMeta = (BookMeta) clone.getItemMeta();
+                bookMeta.setPages(bookNBT.pages());
+                clone.setItemMeta(bookMeta);
+                nbt.setBoolean("unloaded", false);
+                book.setTag(nbt);
+                clone = book.asBukkitCopy();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        return clone;
+    }
+
+    private static String hash(String md5) throws NoSuchAlgorithmException {
+        StringBuilder hash = new StringBuilder();
+        for (byte byte_ : java.security.MessageDigest.getInstance("MD5").digest(md5.getBytes())) {
+            hash.append(Integer.toHexString((byte_ & 0xFF) | 0x100), 1, 3);
+        }
+        return hash.toString();
+    }
+    
+    public record BookNBT(List<String> pages) {
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 4fafb4977a40176d88e790924afba8fa9e17867b..6a80b170b96dc72d733a1dbd7316ed281e1c2382 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -2,6 +2,9 @@ package net.minecraft.server;
 
 import java.util.Iterator;
 import javax.annotation.Nullable;
+
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.JsonBookUtil;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 // CraftBukkit start
@@ -374,6 +377,13 @@ public class EntityItem extends Entity implements HopperPusher {
                     return;
                 }
 
+                // Dionysus start
+                if (DionysusConfig.saveBooksAsJson) {
+                    final EntityPlayer player = (EntityPlayer) entityhuman;
+                    JsonBookUtil.loadInventory(player, player.inventory.getContents());
+                }
+                // Dionysus end
+
                 // Call newer event afterwards
                 EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 entityEvent.setCancelled(!entityhuman.canPickUpLoot);
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 099b3ebb6a8be90e0cbf45b4a21be6f918153a54..be0fdf3154d3cda9e7ab78b16c41e6edba799455 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.JsonBookUtil;
 import io.netty.buffer.Unpooled;
 import java.util.ArrayDeque; // Paper
 import java.util.ArrayList;
@@ -861,6 +863,14 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             return;
         }
         // CraftBukkit end
+        // Dionysus start - save books as json
+        if (DionysusConfig.saveBooksAsJson) {
+            if (container instanceof ContainerShulkerBox) {
+                JsonBookUtil.unloadInventory(this, container.items);
+                JsonBookUtil.unloadInventory(this, inventory.getContents());
+            }
+        }
+        // Dionysus end
 
         if (iinventory instanceof ILootable && ((ILootable) iinventory).b() != null && this.isSpectator()) {
             this.a((new ChatMessage("container.spectatorCantOpen", new Object[0])).setChatModifier((new ChatModifier()).setColor(EnumChatFormat.RED)), true);
@@ -1001,6 +1011,11 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNKNOWN);
     }
     public void closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        // Dionysus start - save books as json
+        if (DionysusConfig.saveBooksAsJson) {
+            JsonBookUtil.loadInventory(this, this.inventory.getContents());
+        }
+        // Dionysus end
         CraftEventFactory.handleInventoryCloseEvent(this, reason); // CraftBukkit
         // Paper end
         this.playerConnection.sendPacket(new PacketPlayOutCloseWindow(this.activeContainer.windowId));
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index c5f5fa4e74fb1564c638f8d586f15d9606ae372c..2a5cef3fbe6657d7525e768bf85606510649ad43 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -10,9 +10,12 @@ import javax.annotation.Nullable;
 import java.util.List;
 import java.util.Map;
 
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.JsonBookUtil;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
+import org.bukkit.block.ShulkerBox;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
@@ -234,6 +237,15 @@ public final class ItemStack {
                 placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(world, entityhuman, enumhand, blocks.get(0), blockposition.getX(), blockposition.getY(), blockposition.getZ());
             }
 
+            // Dionysus start - save books as json
+            if (DionysusConfig.saveBooksAsJson) {
+                TileEntity tileentity = world.getTileEntity(blockposition);
+                if (tileentity instanceof TileEntityShulkerBox shulker) {
+                    JsonBookUtil.unloadInventory((EntityPlayer) entityhuman, shulker.getContents());
+                }
+            }
+            // Dionysus end
+
             if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
                 enuminteractionresult = EnumInteractionResult.FAIL; // cancel placement
                 // PAIL: Remove this when MC-99075 fixed
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index a474d8af1670ca1619bc0043f2b4f912ea9a4844..6ed2a896ea7d5d104459c90a70c9836fd6a98a29 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -2,6 +2,9 @@ package net.minecraft.server;
 
 // CraftBukkit start
 import java.util.ArrayList;
+
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.JsonBookUtil;
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.Event;
@@ -307,6 +310,15 @@ public class PlayerInteractManager {
                 ((EntityPlayer) this.player).playerConnection.sendPacket(packet);
             }
 
+            // Dionysus start - save books as jsons
+            if (DionysusConfig.saveBooksAsJson) {
+                TileEntity tileentity = world.getTileEntity(blockposition);
+                if (tileentity instanceof TileEntityShulkerBox shulker) {
+                    JsonBookUtil.unloadInventory(this.player, shulker.getContents());
+                }
+            }
+            // Dionysus end
+
             event = new BlockBreakEvent(block, this.player.getBukkitEntity());
 
             // Sword + Creative mode pre-cancel
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 897a49eda09df4654ea31808907cb60c8fa94f77..8cf0b441c610475bda364ecd25d32bd9e62df424 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.JsonBookUtil;
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.net.SocketAddress;
@@ -443,6 +444,14 @@ public abstract class PlayerList {
             return;
         }
 
+        // Dionysus start - save books as json
+        if (DionysusConfig.saveBooksAsJson) {
+            JsonBookUtil.unloadInventory(entityplayer, entityplayer.inventory.getContents());
+            JsonBookUtil.loadItemStack(entityplayer.getItemInMainHand().asBukkitCopy());
+            JsonBookUtil.loadItemStack(entityplayer.getItemInOffHand().asBukkitCopy());
+        }
+        // Dionysus end
+
         joinMessage = playerJoinEvent.getJoinMessage();
 
         if (joinMessage != null && joinMessage.length() > 0) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 4866d1aee60f5c32a8f7883968f101707280c64c..1a388abd7fa1c24120255527ee4ad05993be2ceb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -4,6 +4,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.ListIterator;
 
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.JsonBookUtil;
 import net.minecraft.server.IHopper;
 import net.minecraft.server.IInventory;
 import net.minecraft.server.InventoryCrafting;
@@ -94,6 +96,13 @@ public class CraftInventory implements Inventory {
 
     public void setItem(int index, ItemStack item) {
         getInventory().setItem(index, CraftItemStack.asNMSCopy(item));
+        // Dionysus start - save books as json
+        if (DionysusConfig.saveBooksAsJson) {
+            if (index >= 0 && index < PlayerInventory.getHotbarSize()) {
+                JsonBookUtil.loadItemStack(item);
+            }
+        }
+        // Dionysus end
     }
 
     public boolean contains(int materialId) {
