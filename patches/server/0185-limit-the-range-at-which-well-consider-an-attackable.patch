From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Thu, 20 Oct 2022 20:02:04 +0500
Subject: [PATCH] limit-the-range-at-which-well-consider-an-attackable-target

This patch aims to ensure that MCP World#getNearestAttackablePlayer
will not trigger chunk loads due to PathfinderGoalNearestAttackableTarget
performing a ray trace operation by pre-checking the maximum limit;

Given that the implementation shows that the limit should only ever
decrease when set, allowing us to skip further checks earlier on
when looking for an attackable entity

diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index cc9f467cc85704d536545aa63985340013e63703..b58daa6db068cdb4da7f2fab53df3f3947323461 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -3000,9 +3000,13 @@ public abstract class World implements IBlockAccess {
 
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
-
+            // Paper start
+            // move distance check up, if set, check distance^2 is less than XZlimit^2, continue
+             // 4th method param is XZlimit (at least at the time of commit)
+            double d6 = entityhuman1.d(d0, entityhuman1.locY, d2);
+            if (d3 < 0.0D || d6 < d3 * d3)
             if (!entityhuman1.abilities.isInvulnerable && entityhuman1.isAlive() && !entityhuman1.isSpectator() && (predicate == null || predicate.apply(entityhuman1))) {
-                double d6 = entityhuman1.d(d0, entityhuman1.locY, d2);
+                // Paper end
                 double d7 = d3;
 
                 if (entityhuman1.isSneaking()) {
