From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Sat, 12 Feb 2022 14:52:55 -0600
Subject: [PATCH] Don't process nbt thats too big

Co-authored-by: RemainingToast <59129680+RemainingToast@users.noreply.github.com>

diff --git a/src/main/java/dev/pomf/dionysus/DionysusConfig.java b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
index c0538f565d18c774485591f0f1745cd42c06ff48..f84d013a0a04574f33d5eb7a306748ac5c8c8f16 100644
--- a/src/main/java/dev/pomf/dionysus/DionysusConfig.java
+++ b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
@@ -224,4 +224,8 @@ public class DionysusConfig {
         }
     }
 
+    public static int maxProcessedNBTSize = 80000;
+    private static void maxProcessedNBTSize() {
+        maxProcessedNBTSize = getInt("max-processed-nbt-size", 80000);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index fa19df341d13c531fd3597362b126ce8f183cd97..09748606f71e0dd6d7b743048070c7b02a0876a0 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -34,6 +34,8 @@ import org.bukkit.event.player.PlayerItemConsumeEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 
+import dev.pomf.dionysus.DionysusConfig; // Dionysus
+
 public abstract class EntityLiving extends Entity {
 
     private static final Logger a = LogManager.getLogger();
@@ -1981,6 +1983,20 @@ public abstract class EntityLiving extends Entity {
 
                 ItemStack itemstack1 = this.getEquipment(enumitemslot);
 
+                // Dionysus start - Don't process large NBTs
+                NBTTagCompound tag1 = itemstack1.getTag();
+                if (tag1 != null && !tag1.isEmpty() && tag1.guessSize() > DionysusConfig.maxProcessedNBTSize) {
+                    itemstack1.setCount(0);
+                    itemstack1.setTag(new NBTTagCompound());
+                }
+
+                NBTTagCompound tag = itemstack.getTag();
+                if (tag != null && !tag.isEmpty() && tag.guessSize() > DionysusConfig.maxProcessedNBTSize) {
+                    itemstack.setCount(0);
+                    itemstack.setTag(new NBTTagCompound());
+                }
+                // Dionysus end - Don't process large NBTs
+
                 if (!ItemStack.matches(itemstack1, itemstack)) {
                     // Paper start - PlayerArmorChangeEvent
                     if (this instanceof EntityPlayer && enumitemslot.getType() == EnumItemSlot.Function.ARMOR) {
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index 035a1714d0caa28f90c95cd515e69591e41693c1..109e48d9a5aef19e1a7d028c5d856ec5a7386b44 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -23,13 +23,13 @@ public class NBTTagCompound extends NBTBase {
 
     private static final Logger b = LogManager.getLogger();
     private static final Pattern c = Pattern.compile("[A-Za-z0-9._+-]+");
-    public final Map<String, NBTBase> map; // Paper
+    public final CustomObject2ObjectOpenHashMap<String, NBTBase> map; // Paper  // Dionysus - Don't process large NBTs
 
     public NBTTagCompound() {
-        this(new Object2ObjectOpenHashMap<>(8, 0.8f)); // Paper - reduce memory footprint of NBTTagCompound
+        this(new CustomObject2ObjectOpenHashMap<>(8, 0.8f)); // Paper - reduce memory footprint of NBTTagCompound // Dionysus - Don't process large NBTs
     }
 
-    protected NBTTagCompound(Map<String, NBTBase> map) {
+    protected NBTTagCompound(CustomObject2ObjectOpenHashMap<String, NBTBase> map) { // Dionysus - Don't process large NBTs
         this.map = map;
     }
 
@@ -306,6 +306,78 @@ public class NBTTagCompound extends NBTBase {
     public void remove(String s) {
         this.map.remove(s);
     }
+    
+    // Dionysus start - Don't process large NBTs
+    static class CustomObject2ObjectOpenHashMap<K, V> extends Object2ObjectOpenHashMap<K, V> {
+        public boolean validSizeCache = false;
+        public CustomObject2ObjectOpenHashMap(int initialCapacity, float loadFactor) {
+            super(initialCapacity, loadFactor);
+        }
+
+        @Override
+        public V put(K k, V v) {
+            validSizeCache = false;
+            return super.put(k, v);
+        }
+
+        @Override
+        public V remove(Object o) {
+            validSizeCache = false;
+            return super.remove(o);
+        }
+
+        @Override
+        public void clear() {
+            validSizeCache = false;
+            super.clear();
+        }
+    }
+    private int cachedSize = -1;
+    private int itemSize(NBTBase nbt) {
+        if (nbt instanceof NBTNumber) {
+            return 16;
+        } else if (nbt instanceof NBTTagIntArray) {
+            return 16 * ((NBTTagIntArray)nbt).d().length;
+        } else if (nbt instanceof NBTTagLongArray) { // there is no length property... so just convert it to a string for now.
+            return nbt.c_().length();
+        } else if (nbt instanceof NBTTagByteArray) {
+            return 2 * ((NBTTagByteArray)nbt).c().length;
+        } else if (nbt instanceof NBTTagString) {
+            return nbt.c_().length();
+        }
+        return 1;
+    }
+
+    public int guessSize() { // technically it's a string length
+        if (this.isEmpty()) {
+            return 0;
+        }
+
+        if (map.validSizeCache) {
+            return cachedSize;
+        }
+
+        int accumulator = 0;
+        for (Map.Entry<String, NBTBase> entry : this.map.entrySet()) {
+            accumulator += entry.getKey().length();
+            if (entry.getValue() instanceof NBTTagList nbttaglist) {
+                if (!nbttaglist.isEmpty()) {
+                    for (NBTBase nbt : nbttaglist.list) {
+                        accumulator += this.itemSize(nbt);
+                    }
+                }
+            } else if (entry.getValue() instanceof NBTTagCompound) {
+                accumulator += ((NBTTagCompound)entry.getValue()).guessSize();
+            } else {
+                accumulator += this.itemSize(entry.getValue());
+            }
+        }
+
+        cachedSize = accumulator;
+        map.validSizeCache = true;
+        return accumulator;
+    }
+    // Dionysus end
 
     public String toString() {
         StringBuilder stringbuilder = new StringBuilder("{");
@@ -362,7 +434,7 @@ public class NBTTagCompound extends NBTBase {
 
     public NBTTagCompound g() {
         // Paper start - reduce memory footprint of NBTTagCompound
-        Object2ObjectOpenHashMap<String, NBTBase> ret = new Object2ObjectOpenHashMap<>(this.map.size(), 0.8f);
+        CustomObject2ObjectOpenHashMap<String, NBTBase> ret = new CustomObject2ObjectOpenHashMap<>(this.map.size(), 0.8f); // Dionysus - Don't process large NBTs
 
         Iterator<Map.Entry<String, NBTBase>> iterator = (this.map instanceof Object2ObjectOpenHashMap) ? ((Object2ObjectOpenHashMap)this.map).object2ObjectEntrySet().fastIterator() : this.map.entrySet().iterator();
         while (iterator.hasNext()) {
