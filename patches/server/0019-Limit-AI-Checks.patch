From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: nopjmp <kthompson@hey.com>
Date: Tue, 9 Feb 2021 17:26:11 -0600
Subject: [PATCH] Limit AI Checks

This will limit AI when TPS is low, player count is high.

Additionally, update the defaults to be friendly to anarchy servers a bit.

Inspiration taken from https://github.com/oldfagorg/MobOptimizer
Credit to: John200410

diff --git a/src/main/java/dev/pomf/dionysus/DionysusConfig.java b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
index 7a6d85bcb3e0ed7d1f1e625e7711d75c1f5985ac..18370801d10cfb5a4c1f5077657f4009b063ca2b 100644
--- a/src/main/java/dev/pomf/dionysus/DionysusConfig.java
+++ b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
@@ -162,4 +162,22 @@ public class DionysusConfig {
         ensureDefault(key, defaultValue, comment);
         return config.getStringList(key);
     }
+
+    public static boolean customNameAiLimitBypass = true;
+    public static boolean tamableAiLimitBypass = true;
+    public static boolean spawnerAiLimitBypass = true;
+    public static double monsterAiLimitTPS = 10;
+    public static int monsterAiLimitPlayerCount = 90;
+    public static double animalAiLimitTPS = 6;
+    public static int animalAiLimitPlayerCount = 120;
+    private static void aiLimit() {
+        customNameAiLimitBypass = getBoolean("ai-limit.bypass.custom-name", true);
+        tamableAiLimitBypass = getBoolean("ai-limit.bypass.tamable", true);
+        spawnerAiLimitBypass = getBoolean("ai-limit.bypass.spawner", true);
+        monsterAiLimitTPS = getDouble("ai-limit.monster.tps", 10);
+        monsterAiLimitPlayerCount = getInt("ai-limit.monster.player-count", 90);
+
+        animalAiLimitTPS = getDouble("ai-limit.animal.tps", 6);
+        animalAiLimitPlayerCount = getInt("ai-limit.animal.player-count", 120);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index d6a1933ad723c5e73142d96f1080063e25407759..595bb31dffdcbab943b767886cd8234850dc014e 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import com.google.common.base.Predicates;
 import com.google.common.collect.Maps;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -10,6 +11,8 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import dev.pomf.dionysus.DionysusConfig;
+import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.LivingEntity;
@@ -1201,23 +1204,41 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public void setNoAI(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntityInsentient.a);
 
-        this.datawatcher.set(EntityInsentient.a, Byte.valueOf(flag ? (byte) (b0 | 1) : (byte) (b0 & -2)));
+        this.datawatcher.set(EntityInsentient.a, flag ? (byte) (b0 | 1) : (byte) (b0 & -2));
     }
 
     public void o(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue();
+        byte b0 = this.datawatcher.get(EntityInsentient.a);
 
-        this.datawatcher.set(EntityInsentient.a, Byte.valueOf(flag ? (byte) (b0 | 2) : (byte) (b0 & -3)));
+        this.datawatcher.set(EntityInsentient.a, flag ? (byte) (b0 | 2) : (byte) (b0 & -3));
+    }
+
+    private boolean shouldLimitAI() {
+        if ((DionysusConfig.customNameAiLimitBypass && hasCustomName())
+                || (DionysusConfig.tamableAiLimitBypass && this instanceof EntityTameableAnimal)
+                || (DionysusConfig.spawnerAiLimitBypass && this.fromMobSpawner))
+            return false;
+
+        double tps = MinecraftServer.getServer().tps1.getAverage();
+        int playerCount = world.players.size();
+
+        if (this instanceof EntityMonster)
+            return tps < DionysusConfig.monsterAiLimitTPS || playerCount > DionysusConfig.monsterAiLimitPlayerCount;
+        else
+            return tps < DionysusConfig.animalAiLimitTPS || playerCount > DionysusConfig.animalAiLimitPlayerCount;
     }
 
     public boolean isNoAI() {
-        return (((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue() & 1) != 0;
+        if (shouldLimitAI()) {
+            return false;
+        }
+        return (this.datawatcher.get(EntityInsentient.a) & 1) != 0;
     }
 
     public boolean dd() {
-        return (((Byte) this.datawatcher.get(EntityInsentient.a)).byteValue() & 2) != 0;
+        return (this.datawatcher.get(EntityInsentient.a) & 2) != 0;
     }
 
     public EnumMainHand getMainHand() {
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index f872c1554d911d28bb2fe8e0e1ce0bad87accaae..d58f1a8d5ea9d439ac51ce607cdad6fa63f49216 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -145,7 +145,7 @@ public class SpigotWorldConfig
     public int monsterActivationRange = 32;
     public int miscActivationRange = 16;
     public int waterActivationRange = 16; // Paper
-    public boolean tickInactiveVillagers = true;
+    public boolean tickInactiveVillagers = false;
     private void activationRange()
     {
         animalActivationRange = getInt( "entity-activation-range.animals", animalActivationRange );
@@ -156,9 +156,9 @@ public class SpigotWorldConfig
         log( "Entity Activation Range: An " + animalActivationRange + " / Mo " + monsterActivationRange + " / Mi " + miscActivationRange + " / Tiv " + tickInactiveVillagers );
     }
 
-    public int playerTrackingRange = 48;
-    public int animalTrackingRange = 48;
-    public int monsterTrackingRange = 48;
+    public int playerTrackingRange = 40;
+    public int animalTrackingRange = 40;
+    public int monsterTrackingRange = 40;
     public int miscTrackingRange = 32;
     public int otherTrackingRange = 64;
     private void trackingRange()
