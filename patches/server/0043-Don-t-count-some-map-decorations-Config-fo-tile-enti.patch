From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RemainingToast <59129680+RemainingToast@users.noreply.github.com>
Date: Wed, 15 Dec 2021 23:03:34 +1000
Subject: [PATCH] Don't count some map decorations, Config fo tile entities and
 some clean up


diff --git a/src/main/java/dev/pomf/dionysus/DionysusConfig.java b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
index 305cb81401e28e97e7043cf1de37676421003fce..043bccf726c5a4cc5455e7eeb65224237addb021 100644
--- a/src/main/java/dev/pomf/dionysus/DionysusConfig.java
+++ b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
@@ -22,6 +22,7 @@ import java.util.regex.Pattern;
 
 public class DionysusConfig {
 
+    // TODO Add wiki on github and link in header
     private static final String HEADER = "This is the main configuration file for Dionysus.\n"
             + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
             + "with caution, and make sure you know what each option does before configuring.\n";
@@ -178,9 +179,9 @@ public class DionysusConfig {
         return config.getString(path, config.getString(path));
     }
 
-    public static long maxLightTimePerTick;
+    public static int maxLightTimePerTick = 10;
     private static void maxLightTimePerTickMs() {
-        maxLightTimePerTick = getInt("light-updates-max-ms-per-tick", 30) * 1000000L;
+        maxLightTimePerTick = getInt("light-updates-max-ms-per-tick", maxLightTimePerTick) * 1000000;
     }
 
     public static boolean customNameAiLimitBypass = true;
@@ -246,13 +247,13 @@ public class DionysusConfig {
 
     public static boolean alternativeBlockPlacement = true;
     private static void alternativeBlockPlacement() {
-        alternativeBedMechanics = getBoolean("tickless-block-placement", alternativeBlockPlacement);
+        alternativeBlockPlacement = getBoolean("tickless-block-placement", alternativeBlockPlacement);
         if (alternativeBlockPlacement) {
             Bukkit.getLogger().info("Tickless Block Placement Mechanics activated. Block placement based on time instead of ticks.");
         }
     }
 
-    public static int mapDecorationsLimit = 20;
+    public static int mapDecorationsLimit = 10;
     private static void mapDecorationsLimit() {
         mapDecorationsLimit = getInt("map-decoration-limit", mapDecorationsLimit);
     }
@@ -265,4 +266,13 @@ public class DionysusConfig {
         chunkOverloadDupeLog = getBoolean("chunk-overload-dupe.log", chunkOverloadDupeLog);
         if (chunkOverloadDupeLog) Bukkit.getLogger().info("Chunk overload dupes will be logged.");
     }
+
+    public static int tileEntityDataLimit = 750;
+    public static int tileEntitySplitLimit = 15000;
+    private static void tileEntityLimit() {
+        tileEntityDataLimit = getInt("tile-entity.data-limit", tileEntityDataLimit);
+        tileEntitySplitLimit = getInt("tile-entity.split-limit", tileEntitySplitLimit);
+    }
+
+
 }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index ddbaacc2d20a63dba7d505b6feddf7d46926dc32..515c361ac987fd689fe09379e34ebc24f3438da6 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -48,13 +48,13 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     // CraftBukkit start
     private static final int CURRENT_LEVEL = 2;
-    // Paper start
+    // Dionysus - Paper start
     public static Random SHARED_RANDOM = new XoShiRo256PlusPlusRandom() {
         private boolean locked = false;
         @Override
         public synchronized void setSeed(long seed) {
             if (locked) {
-                LogManager.getLogger().error("Ignoring setSeed on Entity.SHARED_RANDOM", new Throwable());
+                LogManager.getLogger().debug("Ignoring setSeed on Entity.SHARED_RANDOM", new Throwable());
             } else {
                 super.setSeed(seed);
                 locked = true;
@@ -66,8 +66,10 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             return this.nextDoubleFast();
         }
     };
+    // Dionysus end
     List<Entity> entitySlice = null;
     // Paper end
+
     static boolean isLevelAtLeast(NBTTagCompound tag, int level) {
         return tag.hasKey("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
     }
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index d26c1798b64333b3e1c04e72ea1823ed453bae1e..e023574268c9ebfdafe86461e3550923dda014f7 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -188,9 +188,13 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 
     public String c() {
         String address = this.networkManager.getSocketAddress().toString();
+
+        // Dionysus start
         if (DionysusConfig.redactPlayerData) {
             address = "/0.0.0.0:0";
         }
+        // Dionysus end
+
         return this.i != null ? this.i + " (" + address + ")" : address;
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 41aa4caaf6c8029835cd5021ef3bc304d4a1e1d6..cc8b3fef7421e5b2f58a22687990ff129bd527cd 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -761,8 +761,8 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     protected void C() throws ExceptionWorldConflict { // CraftBukkit - added throws
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
         this.slackActivityAccountant.tickStarted(); // Spigot
-        long i = System.nanoTime(); long startTime = i; // Paper
-        tickStartTime = startTime; // Dionysus
+        long i = System.nanoTime();
+        tickStartTime = i; // Dionysus
 
         ++this.ticks;
         if (this.T) {
@@ -831,7 +831,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         this.methodProfiler.b();
 
         org.spigotmc.WatchdogThread.tick(); // Spigot
-        DionysusLightingQueue.processQueue(startTime); // Paper
+        DionysusLightingQueue.processQueue(i); // Paper
         this.slackActivityAccountant.tickEnded(tickNanos); // Spigot
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index e37627fff51f4161231213ad08f7b411bd0874a5..c797f103bf68dfe5e281ca4344a479262e9a3bb4 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import dev.pomf.dionysus.DionysusConfig;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import java.io.IOException;
@@ -21,10 +22,6 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
     // Paper start
     private final java.util.List<Packet> extraPackets = new java.util.ArrayList<>();
-    private static final int TE_LIMIT = Integer.getInteger("dionysus.te-limit", 750); // Dionysus - Tuinity - handle oversized chunk data packets more robustly
-    private static final int TE_SPLIT_LIMIT = Math.max(4096 + 1, Integer.getInteger("dionysus.te-split-limit", 15_000)); // Dionysus - Tuinity- handle oversized chunk data packets more robustly
-    private boolean mustSplit = false; // Dionysus - Tuinity - handle oversized chunk data packets more robustly
-
     public java.util.List<Packet> getExtraPackets() {
         return extraPackets;
     }
@@ -41,7 +38,11 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         this.c = this.a(new PacketDataSerializer(this.g()), chunk, flag, i);
         this.e = Lists.newArrayList();
         Iterator iterator = chunk.getTileEntities().entrySet().iterator();
-        int totalTileEntities = 0; // Dionysus
+
+        // Dionysus start
+        int totalTileEntities = 0;
+        boolean mustSplit = false;
+        // Dionysus end
 
         while (iterator.hasNext()) {
             Entry entry = (Entry) iterator.next();
@@ -52,13 +53,13 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
             if (this.e() || (i & 1 << j) != 0) {
                 // Dionysus Start - handle tile entities better
                 ++totalTileEntities;
-                if (totalTileEntities > TE_SPLIT_LIMIT) {
-                    this.mustSplit = true;
+                if (totalTileEntities > DionysusConfig.tileEntitySplitLimit) {
+                    mustSplit = true;
                     this.getTileDataEntityData().clear();
                     this.extraPackets.clear();
                     break;
                 }
-                if (totalTileEntities > TE_LIMIT) {
+                if (totalTileEntities > DionysusConfig.tileEntityDataLimit) {
                     PacketPlayOutTileEntityData updatePacket = tileentity.getUpdatePacket();
                     if (updatePacket != null) {
                         extraPackets.add(updatePacket);
@@ -73,7 +74,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         }
 
         // Dionysus - Tuinity start - improve oversized chunk data packet handling
-        if (this.mustSplit) {
+        if (mustSplit) {
             int chunkSectionBitSetCopy = chunkSectionBitSet;
             for (int a = 0, len = Integer.bitCount(chunkSectionBitSet); a < len; ++a) {
                 // IntegerUtil.getTrailingBit (-n & n)
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index f5de64f2729c72a58188570565d17d9dac5eaa4a..a3f61121dca1fbc28a2f073a974d2130212ed925 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -10,13 +10,15 @@ import javax.annotation.Nullable;
 
 // CraftBukkit start
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicInteger;
 
+import dev.pomf.dionysus.DionysusConfig;
+import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.map.CraftMapView;
 // CraftBukkit end
 
-import dev.pomf.dionysus.DionysusConfig; // Dionysus
 
 public class WorldMap extends PersistentBase {
 
@@ -285,13 +287,39 @@ public class WorldMap extends PersistentBase {
         }
 
         // Dionysus start - limit decorations
-        if (this.decorations.size() >= DionysusConfig.mapDecorationsLimit) {
+        if (countMapIcon(this.decorations) >= DionysusConfig.mapDecorationsLimit) {
             return;
         }
+
         // Dionysus end
         this.decorations.put(s, new MapIcon(mapicon_type, b0, b1, b2));
     }
 
+    // Dionysus start
+    // Not all map decorations need to be prevented
+    // See https://minecraft.fandom.com/wiki/Map#Map_icons
+    private int countMapIcon(Map<UUID, MapIcon> icons) {
+        AtomicInteger count = new AtomicInteger();
+
+        for (MapIcon icon : icons.values()) {
+            switch (MapIcon.Type.a(icon.getType())) {
+                case PLAYER_OFF_MAP:
+                case PLAYER_OFF_LIMITS:
+                case PLAYER:
+                case MANSION:
+                case MONUMENT: {
+                    continue;
+                }
+                default: {
+                    count.getAndIncrement();
+                }
+            }
+        }
+
+        return count.get();
+    }
+    // Dionysus end
+
     @Nullable
     public Packet<?> a(ItemStack itemstack, World world, EntityHuman entityhuman) {
         WorldMap.WorldMapHumanTracker worldmap_worldmaphumantracker = this.k.get(entityhuman);
