From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlexProgrammerDE <40795980+AlexProgrammerDE@users.noreply.github.com>
Date: Sat, 18 Jun 2022 08:44:39 +0200
Subject: [PATCH] Add Sentry

Pufferfish
Copyright (C) 2022 Pufferfish Studios LLC

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

diff --git a/src/main/java/dev/pomf/dionysus/DionysusConfig.java b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
index 8ff1d3c79ba7472d2d609bc0cfabea674234f9ca..7740e39d3f15a2727e42d1b3e042920c98b4f469 100644
--- a/src/main/java/dev/pomf/dionysus/DionysusConfig.java
+++ b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
@@ -307,4 +307,15 @@ public class DionysusConfig {
         noChunksPastWorldBorder = getBoolean("no-chunks-past-world-border", noChunksPastWorldBorder);
     }
 
+    public static String sentryDsn;
+    private static void sentry() {
+        String sentryEnvironment = System.getenv("SENTRY_DSN");
+        String sentryConfig = getString("sentry-dsn", "");
+
+        sentryDsn = sentryEnvironment == null ? sentryConfig : sentryEnvironment;
+        if (sentryDsn != null && !sentryDsn.isBlank()) {
+            dev.pomf.dionysus.sentry.SentryManager.init();
+        }
+    }
+
 }
diff --git a/src/main/java/dev/pomf/dionysus/sentry/DionysusSentryAppender.java b/src/main/java/dev/pomf/dionysus/sentry/DionysusSentryAppender.java
new file mode 100644
index 0000000000000000000000000000000000000000..bcb1d08d388d1b85a07faa2121e3f5faee73c058
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/sentry/DionysusSentryAppender.java
@@ -0,0 +1,136 @@
+package dev.pomf.dionysus.sentry;
+
+import com.google.common.reflect.TypeToken;
+import com.google.gson.Gson;
+import io.sentry.Breadcrumb;
+import io.sentry.Sentry;
+import io.sentry.SentryEvent;
+import io.sentry.SentryLevel;
+import io.sentry.protocol.Message;
+import io.sentry.protocol.User;
+import java.util.Map;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.appender.AbstractAppender;
+import org.apache.logging.log4j.core.filter.AbstractFilter;
+
+public class DionysusSentryAppender extends AbstractAppender {
+
+    private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger(DionysusSentryAppender.class);
+    private static final Gson GSON = new Gson();
+
+    public DionysusSentryAppender() {
+        super("DionysusSentryAppender", new SentryFilter(), null);
+    }
+
+    @Override
+    public void append(LogEvent logEvent) {
+        if (logEvent.getThrown() != null && logEvent.getLevel().isMoreSpecificThan(Level.WARN)) {
+            try {
+                logException(logEvent);
+            } catch (Exception e) {
+                logger.warn("Failed to log event with sentry", e);
+            }
+        } else {
+            try {
+                logBreadcrumb(logEvent);
+            } catch (Exception e) {
+                logger.warn("Failed to log event with sentry", e);
+            }
+        }
+    }
+
+    private void logException(LogEvent e) {
+        SentryEvent event = new SentryEvent(e.getThrown());
+
+        Message sentryMessage = new Message();
+        sentryMessage.setMessage(e.getMessage().getFormattedMessage());
+
+        event.setMessage(sentryMessage);
+        event.setThrowable(e.getThrown());
+        event.setLevel(getLevel(e.getLevel()));
+        event.setLogger(e.getLoggerName());
+        event.setTransaction(e.getLoggerName());
+        event.setExtra("thread_name", e.getThreadName());
+
+        boolean hasContext = e.getContextData() != null;
+
+        if (hasContext && e.getContextData().containsKey("dionysussentry_playerid")) {
+            User user = new User();
+            user.setId(e.getContextData().getValue("dionysussentry_playerid"));
+            user.setUsername(e.getContextData().getValue("dionysussentry_playername"));
+            event.setUser(user);
+        }
+
+        if (hasContext && e.getContextData().containsKey("dionysussentry_pluginname")) {
+            event.setExtra("plugin.name", e.getContextData().getValue("dionysussentry_pluginname"));
+            event.setExtra("plugin.version", e.getContextData().getValue("dionysussentry_pluginversion"));
+            event.setTransaction(e.getContextData().getValue("dionysussentry_pluginname"));
+        }
+
+        if (hasContext && e.getContextData().containsKey("dionysussentry_eventdata")) {
+            Map<String, String> eventFields = GSON.fromJson((String) e.getContextData().getValue("dionysussentry_eventdata"), new TypeToken<Map<String, String>>() {}.getType());
+            if (eventFields != null) {
+                event.setExtra("event", eventFields);
+            }
+        }
+
+        Sentry.captureEvent(event);
+    }
+
+    private void logBreadcrumb(LogEvent e) {
+        Breadcrumb breadcrumb = new Breadcrumb();
+
+        breadcrumb.setLevel(getLevel(e.getLevel()));
+        breadcrumb.setCategory(e.getLoggerName());
+        breadcrumb.setType(e.getLoggerName());
+        breadcrumb.setMessage(e.getMessage().getFormattedMessage());
+
+        Sentry.addBreadcrumb(breadcrumb);
+    }
+
+    private SentryLevel getLevel(Level level) {
+        switch (level.getStandardLevel()) {
+            case TRACE:
+            case DEBUG:
+                return SentryLevel.DEBUG;
+            case WARN:
+                return SentryLevel.WARNING;
+            case ERROR:
+                return SentryLevel.ERROR;
+            case FATAL:
+                return SentryLevel.FATAL;
+            case INFO:
+            default:
+                return SentryLevel.INFO;
+        }
+    }
+
+    private static class SentryFilter extends AbstractFilter {
+
+        @Override
+        public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, String msg,
+                             Object... params) {
+            return this.filter(logger.getName());
+        }
+
+        @Override
+        public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, Object msg, Throwable t) {
+            return this.filter(logger.getName());
+        }
+
+        @Override
+        public Result filter(LogEvent event) {
+            return this.filter(event == null ? null : event.getLoggerName());
+        }
+
+        private Result filter(String loggerName) {
+            return loggerName != null && loggerName.startsWith("dev.pomf.dionysus.sentry") ? Result.DENY
+                    : Result.NEUTRAL;
+        }
+
+    }
+}
diff --git a/src/main/java/dev/pomf/dionysus/sentry/SentryManager.java b/src/main/java/dev/pomf/dionysus/sentry/SentryManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..a1df0320318740ed64f5aa7c398ceb8eb41d5760
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/sentry/SentryManager.java
@@ -0,0 +1,40 @@
+package dev.pomf.dionysus.sentry;
+
+import dev.pomf.dionysus.DionysusConfig;
+import io.sentry.Sentry;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class SentryManager {
+
+    private static final Logger logger = LogManager.getLogger(SentryManager.class);
+
+    private SentryManager() {
+
+    }
+
+    private static boolean initialized = false;
+
+    public static synchronized void init() {
+        if (initialized) {
+            return;
+        }
+        try {
+            initialized = true;
+
+            Sentry.init(options -> {
+                options.setDsn(DionysusConfig.sentryDsn);
+                options.setMaxBreadcrumbs(100);
+            });
+
+            DionysusSentryAppender appender = new DionysusSentryAppender();
+            appender.start();
+            ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger()).addAppender(appender);
+            logger.info("Sentry logging started!");
+        } catch (Exception e) {
+            logger.warn("Failed to initialize sentry!", e);
+            initialized = false;
+        }
+    }
+
+}
