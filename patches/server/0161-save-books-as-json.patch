From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RemainingToast <Remainingtoast@gmail.com>
Date: Thu, 25 Aug 2022 00:20:57 +1000
Subject: [PATCH] save books as json


diff --git a/pom.xml b/pom.xml
index 1f2fc8223808ce352267660ca9a11d7ffec94d70..85b4d734e8c383e18779be566e3c0bd78ba36ac5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -75,6 +75,15 @@
             <version>1.3.0</version>
         </dependency>
 
+        <!-- Dionysus start - Save Books as Json -->
+        <dependency>
+            <groupId>de.tr7zw</groupId>
+            <artifactId>item-nbt-api</artifactId>
+            <version>2.10.0-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
+        <!-- Dionysus end -->
+
         <!--
           Required to add the missing Log4j2Plugins.dat file from log4j-core
           which has been removed by Mojang. Without it, log4j has to classload
diff --git a/src/main/java/dev/pomf/dionysus/DionysusConfig.java b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
index 48319f349c63bf9d04197a48ef756b8c7fdd17a3..45b8bb37fb94b3a1993654d80a5e36ad1dc4f245 100644
--- a/src/main/java/dev/pomf/dionysus/DionysusConfig.java
+++ b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
@@ -444,4 +444,13 @@ public class DionysusConfig {
             networks is predictable and intuitive rather than locational and chaotic."""
         );
     }
+
+    public static boolean saveBooksAsJson = true;
+    private static void saveBooksAsJson() {
+        saveBooksAsJson = getBoolean("save-books-as-json", saveBooksAsJson);
+        setComment(
+                "save-books-as-json",
+                "Books stored in /world/bookdata/*"
+        );
+    }
 }
diff --git a/src/main/java/dev/pomf/dionysus/util/BookObject.java b/src/main/java/dev/pomf/dionysus/util/BookObject.java
new file mode 100644
index 0000000000000000000000000000000000000000..349376562ed8b91496496dbf2d9fea32642403ad
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/util/BookObject.java
@@ -0,0 +1,23 @@
+package dev.pomf.dionysus.util;
+
+import java.util.List;
+
+public class BookObject {
+
+    private String author;
+
+    private List<String> pages;
+
+    public BookObject(String author, List<String> pages) {
+        this.author = author;
+        this.pages = pages;
+    }
+
+    public String getAuthor() {
+        return author;
+    }
+
+    public List<String> getPages() {
+        return pages;
+    }
+}
diff --git a/src/main/java/dev/pomf/dionysus/util/BookUtil.java b/src/main/java/dev/pomf/dionysus/util/BookUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..078429f54ff10f00b12a14c10ea5bf9a1ac0b738
--- /dev/null
+++ b/src/main/java/dev/pomf/dionysus/util/BookUtil.java
@@ -0,0 +1,135 @@
+package dev.pomf.dionysus.util;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import de.tr7zw.changeme.nbtapi.NBTItem;
+import net.minecraft.server.EntityPlayer;
+import org.bukkit.Material;
+import org.bukkit.block.ShulkerBox;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.BlockStateMeta;
+import org.bukkit.inventory.meta.BookMeta;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.Writer;
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.List;
+
+public class BookUtil {
+
+    private static final String FILE_PATH = "/world/bookdata/%s.json";
+    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
+
+    public static void loadInventory(EntityPlayer player, Inventory inventory) {
+        for (ItemStack slot : inventory.getContents()) {
+            if (slot == null) continue;
+            loadItemStack(slot);
+        }
+
+        player.updateInventory(player.activeContainer);
+    }
+
+    public static void unloadInventory(EntityPlayer player, Inventory inventory) {
+        for (ItemStack slot : inventory.getContents()) {
+            if (slot == null) continue;
+            unloadItemStack(slot);
+            if (slot.getItemMeta() instanceof BlockStateMeta meta) {
+                if (meta instanceof ShulkerBox) {
+                    ShulkerBox shulker = (ShulkerBox) meta.getBlockState();
+                    Inventory shulkerInv = shulker.getInventory();
+                    for (ItemStack shulkerSlot : shulkerInv.getContents()) {
+                        if (shulkerSlot == null) continue;
+                        unloadItemStack(shulkerSlot);
+                    }
+                    shulker.getInventory().setContents(shulkerInv.getContents());
+                    meta.setBlockState(shulker);
+                    slot.setItemMeta(meta);
+                }
+            }
+        }
+
+        player.updateInventory(player.activeContainer);
+    }
+
+    private static void unloadItemStack(ItemStack itemStack) {
+        if (itemStack.getType() == Material.BOOK_AND_QUILL || itemStack.getType() == Material.WRITTEN_BOOK) {
+            NBTItem nbtItem = new NBTItem(itemStack);
+            if (!(nbtItem.hasKey("key") && nbtItem.getBoolean("unloaded"))) {
+                itemStack.setItemMeta(unloadBook(itemStack).getItemMeta());
+            }
+        }
+    }
+
+    private static void loadItemStack(ItemStack itemStack) {
+        if (itemStack.getType() == Material.BOOK_AND_QUILL || itemStack.getType() == Material.WRITTEN_BOOK) {
+            NBTItem nbtItem = new NBTItem(itemStack);
+            if (nbtItem.getBoolean("unloaded")) {
+                itemStack.setItemMeta(loadBook(itemStack).getItemMeta());
+            }
+        }
+    }
+
+    private static ItemStack unloadBook(ItemStack book) {
+        ItemStack clone = book;
+        BookMeta meta = (BookMeta) book.getItemMeta();
+        try {
+            List<String> pages = new ArrayList<>();
+            for(String str: meta.getPages()) {
+                ByteBuffer buffer = StandardCharsets.UTF_8.encode(str);
+                String utf8str = StandardCharsets.UTF_8.decode(buffer).toString();
+                pages.add(utf8str);
+            }
+            Writer writer = Files.newBufferedWriter(Paths.get(FILE_PATH.formatted(hash(meta.getPages()+""))));
+            GSON.toJson(new BookObject(meta.getAuthor(), pages), writer);
+            writer.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        NBTItem nbtItem = new NBTItem(clone);
+        nbtItem.setString("key", hash(meta.getPages()+""));
+        nbtItem.setBoolean("unloaded", true);
+        clone = nbtItem.getItem();
+        meta = (BookMeta) clone.getItemMeta();
+        meta.setPages(new ArrayList<>());
+        clone.setItemMeta(meta);
+        return clone;
+    }
+
+    private static ItemStack loadBook(ItemStack book) {
+        ItemStack clone = book;
+        NBTItem nbtItem = new NBTItem(clone);
+        try {
+            Reader reader = Files.newBufferedReader(Paths.get(FILE_PATH.formatted(nbtItem.getString("key"))));
+            BookObject bookObject = GSON.fromJson(reader, BookObject.class);
+            reader.close();
+            BookMeta bookMeta = (BookMeta) clone.getItemMeta();
+            bookMeta.setAuthor(bookObject.getAuthor());
+            bookMeta.setPages(bookObject.getPages());
+            clone.setItemMeta(bookMeta);
+            nbtItem = new NBTItem(clone);
+            nbtItem.setBoolean("unloaded", false);
+            clone = nbtItem.getItem();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return clone;
+    }
+
+    private static String hash(String md5) {
+        try {
+            StringBuilder hash = new StringBuilder();
+            for (byte byte_ : java.security.MessageDigest.getInstance("MD5").digest(md5.getBytes())) {
+                hash.append(Integer.toHexString((byte_ & 0xFF) | 0x100), 1, 3);
+            }
+            return hash.toString();
+        } catch (java.security.NoSuchAlgorithmException ignored) {}
+        return null;
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 4fafb4977a40176d88e790924afba8fa9e17867b..f1f534fee2b5a11e1e4ef9a85f15a766b5d155ae 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -2,6 +2,9 @@ package net.minecraft.server;
 
 import java.util.Iterator;
 import javax.annotation.Nullable;
+
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.BookUtil;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 // CraftBukkit start
@@ -374,6 +377,12 @@ public class EntityItem extends Entity implements HopperPusher {
                     return;
                 }
 
+                // Dionysus start
+                if (entityhuman instanceof EntityPlayer player && DionysusConfig.saveBooksAsJson) {
+                    BookUtil.loadInventory(player, entityhuman.getBukkitEntity().getInventory());
+                }
+                // Dionysus end
+
                 // Call newer event afterwards
                 EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 entityEvent.setCancelled(!entityhuman.canPickUpLoot);
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 099b3ebb6a8be90e0cbf45b4a21be6f918153a54..f474ea6d1fb75dd4c51c397f1ce6779c0e65933d 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.BookUtil;
 import io.netty.buffer.Unpooled;
 import java.util.ArrayDeque; // Paper
 import java.util.ArrayList;
@@ -1001,6 +1003,11 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNKNOWN);
     }
     public void closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+        // Dionysus start - save books as json
+        if (DionysusConfig.saveBooksAsJson) {
+            BookUtil.loadInventory(this, getBukkitEntity().getInventory());
+        }
+        // Dionysus end
         CraftEventFactory.handleInventoryCloseEvent(this, reason); // CraftBukkit
         // Paper end
         this.playerConnection.sendPacket(new PacketPlayOutCloseWindow(this.activeContainer.windowId));
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 897a49eda09df4654ea31808907cb60c8fa94f77..9d2a62f5745b0999df03a87efc7f1e48aa53a27a 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.BookUtil;
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.net.SocketAddress;
@@ -435,6 +436,12 @@ public abstract class PlayerList {
         // this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer})); // CraftBukkit - replaced with loop below
         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
 
+        // Dionysus start - save books as json
+        if (DionysusConfig.saveBooksAsJson) {
+            BookUtil.unloadInventory(entityplayer, entityplayer.getBukkitEntity().getInventory());
+        }
+        // Dionysus end
+
         // CraftBukkit start
         PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent(cserver.getPlayer(entityplayer), joinMessage);
         cserver.getPluginManager().callEvent(playerJoinEvent);
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index f1a3ca9509ebc50eaa67bf4dac2645f5ee37bbef..a26ab4a206e8cf6c84bf1d7e0c0888b737c43616 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -10,6 +10,9 @@ import javax.annotation.Nullable;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
 
+import de.tr7zw.changeme.nbtapi.NBTItem;
+import dev.pomf.dionysus.DionysusConfig;
+import dev.pomf.dionysus.util.BookUtil;
 import net.minecraft.server.*;
 
 import org.bukkit.Bukkit;
@@ -30,6 +33,7 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.inventory.CraftInventoryCrafting;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftMetaBook;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
 import org.bukkit.craftbukkit.util.CraftDamageSource;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.AreaEffectCloud;
@@ -820,6 +824,14 @@ public class CraftEventFactory {
         CraftPlayer craftPlayer = player.getBukkitEntity();
         player.activeContainer.transferTo(container, craftPlayer);
 
+        // Dionysus start - save books as json
+        if (DionysusConfig.saveBooksAsJson) {
+            InventoryView inv = player.activeContainer.getBukkitView();
+            BookUtil.unloadInventory(player, inv.getTopInventory());
+            BookUtil.unloadInventory(player, craftPlayer.getInventory());
+        }
+        // Dionysus end
+
         InventoryOpenEvent event = new InventoryOpenEvent(container.getBukkitView());
         event.setCancelled(cancelled);
         server.getPluginManager().callEvent(event);
