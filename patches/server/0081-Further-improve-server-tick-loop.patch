From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Softik Lord <dimap9986@gmail.com>
Date: Sat, 9 Jul 2022 04:07:26 +0500
Subject: [PATCH] Further-improve-server-tick-loop


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 65e6fe1e14e11f53cf583d32589cf17da1903cd2..bf0301a50294bfbcbcc9ce94fc2761dab0981334 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -17,6 +17,7 @@ import java.awt.GraphicsEnvironment;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.IOException;
+import java.math.BigDecimal;
 import java.io.UnsupportedEncodingException;
 import java.net.Proxy;
 import java.net.URLEncoder;
@@ -576,39 +577,52 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
     public static class RollingAverage {
         private final int size;
         private long time;
-        private double total;
+        //private double total;
+		private java.math.BigDecimal total;
         private int index = 0;
-        private final double[] samples;
+        //private final double[] samples;
+		private final java.math.BigDecimal[] samples;
         private final long[] times;
 
         RollingAverage(int size) {
             this.size = size;
             this.time = size * SEC_IN_NANO;
-            this.total = TPS * SEC_IN_NANO * size;
-            this.samples = new double[size];
+           // this.total = TPS * SEC_IN_NANO * size;
+           // this.samples = new double[size];
+		    this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
+            this.samples = new java.math.BigDecimal[size];
             this.times = new long[size];
             for (int i = 0; i < size; i++) {
-                this.samples[i] = TPS;
+                //this.samples[i] = TPS;
+				this.samples[i] = dec(TPS);
                 this.times[i] = SEC_IN_NANO;
             }
         }
 
-        public void add(double x, long t) {
+       // public void add(double x, long t) {
+        private static java.math.BigDecimal dec(long t) {
+            return new java.math.BigDecimal(t);
+        }
+        public void add(java.math.BigDecimal x, long t) {
             time -= times[index];
-            total -= samples[index] * times[index];
+            //total -= samples[index] * times[index];
+			total = total.subtract(samples[index].multiply(dec(times[index])));
             samples[index] = x;
             times[index] = t;
             time += t;
-            total += x * t;
+           // total += x * t;
+		   total = total.add(x.multiply(dec(t)));
             if (++index == size) {
                 index = 0;
             }
         }
 
         public double getAverage() {
-            return total / time;
+            //return total / time;
+			return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue();
         }
     }
+	private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL));
     // Paper End
 
     public void run() {
@@ -650,7 +664,8 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                     if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
                     {
                         final long diff = curTime - tickSection;
-                        double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
+                        //double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
+						java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
                         tps1.add(currentTps, diff);
                         tps5.add(currentTps, diff);
                         tps15.add(currentTps, diff);
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 6d21c326922ad424734c803c8f0ab586bfa999b7..ea94666d9de0c4eecb163ddbdcae089b0245b01f 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -39,6 +39,6 @@ public class TicksPerSecondCommand extends Command
     private static String format(double tps) // Paper - Made static
     {
         return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-                + ( ( tps > 20.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+                + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // NeonPaper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
     }
 }
