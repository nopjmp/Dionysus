From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kamillaova <54859825+Kamillaova@users.noreply.github.com>
Date: Sat, 6 Aug 2022 19:55:52 +0300
Subject: [PATCH] Use FastThreadLocalThread for netty IO threads


diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index e68112d39b6fc38bfdbe6e503a7c9d1bd1bdfb31..ac070caffe9b0c9ba834e682d8cf80fab794ee2a 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -1,7 +1,12 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.util.concurrent.ThreadFactoryBuilder;
+// Dionysus start - Use FastThreadLocalThread for netty IO threads
+//import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import io.netty.util.concurrent.FastThreadLocalThread;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+// Dionysus end
 import dev.pomf.dionysus.DionysusConfig;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
@@ -35,6 +40,36 @@ import org.apache.logging.log4j.Logger;
 public class ServerConnection {
     private static final XoShiRo256PlusPlusRandom RANDOM = new XoShiRo256PlusPlusRandom();
     private static final Logger e = LogManager.getLogger();
+
+    // Dionysus start - Use FastThreadLocalThread for netty IO threads
+    private static class ThreadFactoryBuilder {
+        private String nameFormat = null;
+        private boolean daemon = false;
+
+        private ThreadFactoryBuilder setNameFormat(String format) {
+            this.nameFormat = format;
+            return this;
+        }
+        private ThreadFactoryBuilder setDaemon(boolean daemon) {
+            this.daemon = daemon;
+            return this;
+        }
+
+        private ThreadFactory build() {
+            return new ThreadFactory() {
+                private final AtomicInteger counter = new AtomicInteger(0);
+
+                @Override
+                public Thread newThread(Runnable r) {
+                    var thread = new FastThreadLocalThread(r, String.format(nameFormat, counter.incrementAndGet()));
+                    thread.setDaemon(daemon);
+                    return thread;
+                }
+            };
+        }
+    }
+    // Dionysus end
+
     public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
         protected NioEventLoopGroup a() {
             return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
